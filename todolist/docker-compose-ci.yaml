version: '3.10'

services:
  front:
    image: sermalenk/skypro-front:lesson-38
    restart: always
    ports:
      - "80:80"
    depends_on:
      - api
    networks:
      - frontend_nw

  postgres:
    image: postgres:13.0-alpine
    restart: on-failure
    env_file:
      - ./.env
    networks:
      - backend_nw
    volumes:
      - pg_data_todolist:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 5s
      timeout: 3s
      retries: 3

  api:
    image: ...
    restart: always
    env_file:
      - ./.env
    environment:
      POSTGRES_HOST: postgres
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend_nw
      - frontend_nw

#  bot:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    restart: always
#    env_file:
#      - ./.env
#    command: python3 manage.py runbot
#    networks:
#      - backend_nw

volumes:
  pg_data_todolist:

networks:
  backend_nw:
    driver: bridge
  frontend_nw:
    driver: bridge
